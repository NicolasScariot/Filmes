{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useState, useEffect } from 'react';\nimport { Container, ListMovies } from \"./styles\";\nimport { useNavigation, useRoute } from '@react-navigation/native';\nimport api, { key } from \"../../services/api\";\nimport SearchItem from \"../../components/SearchItem\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction Search() {\n  var navigation = useNavigation();\n  var route = useRoute();\n\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      movie = _useState2[0],\n      setMovie = _useState2[1];\n\n  var _useState3 = useState(true),\n      _useState4 = _slicedToArray(_useState3, 2),\n      loading = _useState4[0],\n      setLoading = _useState4[1];\n\n  useEffect(function () {\n    var isActive = true;\n\n    function getSearchMovie() {\n      var _route$params;\n\n      var response;\n      return _regeneratorRuntime.async(function getSearchMovie$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regeneratorRuntime.awrap(api.get('/search/movie', {\n                params: {\n                  query: route == null ? void 0 : (_route$params = route.params) == null ? void 0 : _route$params.name,\n                  api_key: key,\n                  language: 'pt-BR',\n                  page: 1\n                }\n              }));\n\n            case 2:\n              response = _context.sent;\n\n              if (isActive) {\n                setMovie(response.data.results);\n                setLoading(false);\n              }\n\n            case 4:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }\n\n    if (isActive) {\n      getSearchMovie();\n    }\n\n    return function () {\n      isActive = false;\n    };\n  }, []);\n\n  function navigateDetailsPage(item) {\n    navigation.navigate('Deteil', {\n      id: item.id\n    });\n  }\n\n  if (loading) {\n    return _jsx(Container, {});\n  }\n\n  return _jsx(Container, {\n    children: _jsx(Container, {\n      children: _jsx(ListMovies, {\n        data: movie,\n        showsVerticalScrollIndicator: false,\n        keyExtractor: function keyExtractor(item) {\n          return String(item.id);\n        },\n        renderItem: function renderItem(_ref) {\n          var item = _ref.item;\n          return _jsx(SearchItem, {\n            data: item,\n            navigatePage: function navigatePage() {\n              return navigateDetailsPage(item);\n            }\n          });\n        }\n      })\n    })\n  });\n}\n\nexport default Search;","map":{"version":3,"sources":["C:/Nico/Projetos SENAI/filmes/filmes/src/pages/Search/index.js"],"names":["React","useState","useEffect","Container","ListMovies","useNavigation","useRoute","api","key","SearchItem","Search","navigation","route","movie","setMovie","loading","setLoading","isActive","getSearchMovie","get","params","query","name","api_key","language","page","response","data","results","navigateDetailsPage","item","navigate","id","String"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,SAAT,EAAoBC,UAApB;AACA,SAASC,aAAT,EAAwBC,QAAxB,QAAwC,0BAAxC;AACA,OAAOC,GAAP,IAAaC,GAAb;AACA,OAAOC,UAAP;;;AAEA,SAASC,MAAT,GAAiB;AACb,MAAMC,UAAU,GAAGN,aAAa,EAAhC;AACA,MAAMO,KAAK,GAAGN,QAAQ,EAAtB;;AAEA,kBAA0BL,QAAQ,CAAC,EAAD,CAAlC;AAAA;AAAA,MAAOY,KAAP;AAAA,MAAcC,QAAd;;AACA,mBAA8Bb,QAAQ,CAAC,IAAD,CAAtC;AAAA;AAAA,MAAOc,OAAP;AAAA,MAAgBC,UAAhB;;AAEAd,EAAAA,SAAS,CAAC,YAAM;AACZ,QAAIe,QAAQ,GAAG,IAAf;;AAEA,aAAeC,cAAf;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+CAC2BX,GAAG,CAACY,GAAJ,CAAQ,eAAR,EAAyB;AAC5CC,gBAAAA,MAAM,EAAE;AACJC,kBAAAA,KAAK,EAAET,KAAF,qCAAEA,KAAK,CAAEQ,MAAT,qBAAE,cAAeE,IADlB;AAEJC,kBAAAA,OAAO,EAAEf,GAFL;AAGJgB,kBAAAA,QAAQ,EAAE,OAHN;AAIJC,kBAAAA,IAAI,EAAE;AAJF;AADoC,eAAzB,CAD3B;;AAAA;AACUC,cAAAA,QADV;;AASI,kBAAGT,QAAH,EAAY;AACRH,gBAAAA,QAAQ,CAACY,QAAQ,CAACC,IAAT,CAAcC,OAAf,CAAR;AACAZ,gBAAAA,UAAU,CAAC,KAAD,CAAV;AACH;;AAZL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAeA,QAAGC,QAAH,EAAY;AACRC,MAAAA,cAAc;AACjB;;AAED,WAAO,YAAM;AACTD,MAAAA,QAAQ,GAAG,KAAX;AACH,KAFD;AAGH,GAzBQ,EAyBN,EAzBM,CAAT;;AA2BA,WAASY,mBAAT,CAA6BC,IAA7B,EAAkC;AAC9BnB,IAAAA,UAAU,CAACoB,QAAX,CAAoB,QAApB,EAA8B;AAACC,MAAAA,EAAE,EAAEF,IAAI,CAACE;AAAV,KAA9B;AACH;;AACD,MAAGjB,OAAH,EAAW;AACP,WACG,KAAC,SAAD,KADH;AAGH;;AAGD,SACI,KAAC,SAAD;AAAA,cACK,KAAC,SAAD;AAAA,gBACG,KAAC,UAAD;AACA,QAAA,IAAI,EAAEF,KADN;AAEA,QAAA,4BAA4B,EAAE,KAF9B;AAGA,QAAA,YAAY,EAAE,sBAACiB,IAAD;AAAA,iBAAUG,MAAM,CAACH,IAAI,CAACE,EAAN,CAAhB;AAAA,SAHd;AAIA,QAAA,UAAU,EAAE;AAAA,cAAEF,IAAF,QAAEA,IAAF;AAAA,iBAAY,KAAC,UAAD;AAAY,YAAA,IAAI,EAAEA,IAAlB;AAAwB,YAAA,YAAY,EAAE;AAAA,qBAAMD,mBAAmB,CAACC,IAAD,CAAzB;AAAA;AAAtC,YAAZ;AAAA;AAJZ;AADH;AADL,IADJ;AAYH;;AAED,eAAepB,MAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { Container, ListMovies } from './styles';\r\nimport { useNavigation, useRoute } from '@react-navigation/native';\r\nimport api, {key} from '../../services/api';\r\nimport SearchItem from '../../components/SearchItem'\r\n\r\nfunction Search(){\r\n    const navigation = useNavigation();\r\n    const route = useRoute();\r\n\r\n    const [movie, setMovie] = useState([]);\r\n    const [loading, setLoading] = useState(true);\r\n\r\n    useEffect(() => {\r\n        let isActive = true;\r\n\r\n        async function getSearchMovie(){\r\n            const response = await api.get('/search/movie', {\r\n                params: {\r\n                    query: route?.params?.name ,\r\n                    api_key: key,\r\n                    language: 'pt-BR',\r\n                    page: 1\r\n                }\r\n            })\r\n            if(isActive){\r\n                setMovie(response.data.results);\r\n                setLoading(false);\r\n            }\r\n        }\r\n\r\n        if(isActive){\r\n            getSearchMovie();\r\n        }\r\n\r\n        return () => {\r\n            isActive = false;\r\n        }\r\n    }, [])\r\n\r\n    function navigateDetailsPage(item){\r\n        navigation.navigate('Deteil', {id: item.id})\r\n    }\r\n    if(loading){\r\n        return(\r\n           <Container></Container>\r\n        )\r\n    }\r\n\r\n\r\n    return(\r\n        <Container>\r\n             <Container>\r\n                <ListMovies \r\n                data={movie}\r\n                showsVerticalScrollIndicator={false}\r\n                keyExtractor={(item) => String(item.id)}\r\n                renderItem={({item}) => <SearchItem data={item} navigatePage={() => navigateDetailsPage(item)}/> }\r\n                />\r\n            </Container>\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default Search;"]},"metadata":{},"sourceType":"module"}