{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useState, useEffect } from 'react';\nimport { Container, Header, HeaderButton, Banner, ButtonLink, Title, ContentArea, Rate, ListGenres, Description } from \"./styles\";\nimport { Feather, Ionicons } from '@expo/vector-icons';\nimport { useNavigation, useRoute } from \"@react-navigation/native\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport Modal from \"react-native-web/dist/exports/Modal\";\nimport api, { key } from \"../../services/api\";\nimport ModalLink from \"../../components/Modal\";\nimport Genres from \"../../components/Genres\";\nimport Stars from 'react-native-stars';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nfunction Detail() {\n  var navigation = useNavigation();\n  var route = useRoute();\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      openLink = _useState2[0],\n      setOpenLink = _useState2[1];\n\n  var _useState3 = useState({}),\n      _useState4 = _slicedToArray(_useState3, 2),\n      movie = _useState4[0],\n      setMovie = _useState4[1];\n\n  useEffect(function () {\n    var isActive = true;\n\n    function getMovie() {\n      var _route$params;\n\n      var response;\n      return _regeneratorRuntime.async(function getMovie$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regeneratorRuntime.awrap(api.get(\"/movie/\" + ((_route$params = route.params) == null ? void 0 : _route$params.id), {\n                params: {\n                  api_key: key,\n                  language: 'pt-BR'\n                }\n              }).catch(function (err) {}));\n\n            case 2:\n              response = _context.sent;\n\n              if (isActive) {\n                setMovie(response.data);\n              }\n\n            case 4:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }\n\n    if (isActive) {\n      getMovie();\n    }\n\n    return function () {\n      isActive = false;\n    };\n  }, []);\n  return _jsxs(Container, {\n    children: [_jsxs(Header, {\n      children: [_jsx(HeaderButton, {\n        activeOpacity: 0.7,\n        onPress: function onPress() {\n          return navigation.goBack();\n        },\n        children: _jsx(Feather, {\n          name: \"arrow-left\",\n          size: 28,\n          color: \"#FFF\"\n        })\n      }), _jsx(HeaderButton, {\n        children: _jsx(Ionicons, {\n          name: \"bookmark\",\n          size: 28,\n          color: \"#FFF\"\n        })\n      })]\n    }), _jsx(Banner, {\n      resizeMethod: \"resize\",\n      source: {\n        uri: \"https://image.tmdb.org/t/p/original/\" + movie.poster_path\n      }\n    }), _jsx(ButtonLink, {\n      onPress: function onPress() {\n        return setOpenLink(true);\n      },\n      children: _jsx(Feather, {\n        name: \"link\",\n        size: 24,\n        color: \"#FFF\"\n      })\n    }), _jsx(Title, {\n      numberOfLines: 2,\n      children: movie.title\n    }), _jsxs(ContentArea, {\n      children: [_jsx(Stars, {\n        default: movie.vote_avarage,\n        count: 10,\n        half: true,\n        starSize: 20,\n        fullStar: _jsx(Ionicons, {\n          name: \"md-star\",\n          size: 24,\n          color: \"#E7A74e\"\n        }),\n        emptyStar: _jsx(Ionicons, {\n          name: \"md-star-outline\",\n          size: 24,\n          color: \"#E7A74e\"\n        }),\n        halfStar: _jsx(Ionicons, {\n          name: \"md-star-half\",\n          size: 24,\n          color: \"#E7A74e\"\n        }),\n        disable: true\n      }), _jsxs(Rate, {\n        children: [movie.vote_average, \"/10\"]\n      })]\n    }), _jsx(ListGenres, {\n      data: movie == null ? void 0 : movie.genres,\n      horizontal: true,\n      showsHorizontalScrollIndicator: false,\n      keyExtractor: function keyExtractor(item) {\n        return String(item.id);\n      },\n      renderItem: function renderItem(_ref) {\n        var item = _ref.item;\n        return _jsx(Genres, {\n          data: item\n        });\n      }\n    }), _jsxs(ScrollView, {\n      showsHorizontalScrollIndicator: false,\n      children: [_jsx(Title, {\n        children: \"Descri\\xE7\\xE3o\"\n      }), _jsx(Description, {\n        children: movie == null ? void 0 : movie.overview\n      })]\n    }), _jsx(Modal, {\n      animationType: \"slide\",\n      visible: openLink,\n      children: _jsx(ModalLink, {\n        link: movie == null ? void 0 : movie.homepage,\n        title: movie == null ? void 0 : movie.title,\n        closeModal: function closeModal() {\n          return setOpenLink(false);\n        }\n      })\n    })]\n  });\n}\n\nexport default Detail;","map":{"version":3,"sources":["C:/Nico/Projetos SENAI/filmes/filmes/src/pages/Detail/index.js"],"names":["React","useState","useEffect","Container","Header","HeaderButton","Banner","ButtonLink","Title","ContentArea","Rate","ListGenres","Description","Feather","Ionicons","useNavigation","useRoute","api","key","ModalLink","Genres","Stars","Detail","navigation","route","openLink","setOpenLink","movie","setMovie","isActive","getMovie","get","params","id","api_key","language","catch","err","response","data","goBack","uri","poster_path","title","vote_avarage","vote_average","genres","item","String","overview","homepage"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { Container, Header, HeaderButton, Banner, ButtonLink, Title, ContentArea, Rate, ListGenres, Description } from './styles';\r\nimport { Feather, Ionicons } from '@expo/vector-icons';\r\nimport { useNavigation, useRoute } from \"@react-navigation/native\";\r\nimport { ScrollView, Modal } from 'react-native';\r\nimport api, { key } from '../../services/api';\r\nimport ModalLink from '../../components/Modal';\r\nimport Genres from '../../components/Genres';\r\nimport Stars from 'react-native-stars';\r\n\r\n\r\n\r\nfunction Detail() {\r\n\r\n    const navigation = useNavigation();\r\n    const route = useRoute();\r\n    const [openLink, setOpenLink] = useState(false);\r\n    const [movie, setMovie] = useState({});\r\n\r\n    useEffect(() => {\r\n        let isActive = true;\r\n\r\n        async function getMovie() {\r\n            const response = await api.get(`/movie/${route.params?.id}`, {\r\n                params: {\r\n                    api_key: key,\r\n                    language: 'pt-BR'\r\n                }\r\n            })\r\n                .catch((err) => {\r\n\r\n                })\r\n            if (isActive) {\r\n                setMovie(response.data);\r\n            }\r\n        }\r\n        if (isActive) {\r\n            getMovie();\r\n        }\r\n\r\n        return () => {\r\n            isActive = false;\r\n        }\r\n\r\n    }, [])\r\n\r\n\r\n    return (\r\n        <Container>\r\n            <Header>\r\n                <HeaderButton activeOpacity={0.7} onPress={() => navigation.goBack()} >\r\n                    <Feather\r\n                        name=\"arrow-left\"\r\n                        size={28}\r\n                        color=\"#FFF\"\r\n                    />\r\n                </HeaderButton>\r\n                <HeaderButton>\r\n                    <Ionicons\r\n                        name=\"bookmark\"\r\n                        size={28}\r\n                        color=\"#FFF\"\r\n                    />\r\n                </HeaderButton>\r\n            </Header>\r\n            <Banner\r\n                resizeMethod='resize'\r\n                source={{ uri: `https://image.tmdb.org/t/p/original/${movie.poster_path}` }}\r\n            />\r\n\r\n            <ButtonLink onPress={() => setOpenLink(true)}>\r\n                <Feather name=\"link\" size={24} color=\"#FFF\" />\r\n            </ButtonLink>\r\n            <Title numberOfLines={2} >{movie.title}</Title>\r\n\r\n            <ContentArea>\r\n                <Stars\r\n                    default={movie.vote_avarage}\r\n                    count={10}\r\n                    half={true}\r\n                    starSize={20}\r\n                    fullStar={<Ionicons name=\"md-star\" size={24} color=\"#E7A74e\" />}\r\n                    emptyStar={<Ionicons name=\"md-star-outline\" size={24} color=\"#E7A74e\" />}\r\n                    halfStar={<Ionicons name=\"md-star-half\" size={24} color=\"#E7A74e\" />}\r\n                    disable={true}\r\n                />\r\n                <Rate>{movie.vote_average}/10</Rate>\r\n            </ContentArea>\r\n\r\n            <ListGenres\r\n                data={movie?.genres}\r\n                horizontal={true}\r\n                showsHorizontalScrollIndicator={false}\r\n                keyExtractor={(item) => String(item.id)}\r\n                renderItem={({ item }) => <Genres data={item} />}\r\n            />\r\n\r\n            <ScrollView showsHorizontalScrollIndicator={false}>\r\n                <Title>Descrição</Title>\r\n                <Description>{movie?.overview}</Description>\r\n            </ScrollView>\r\n\r\n            <Modal animationType=\"slide\" visible={openLink}>\r\n                <ModalLink \r\n                link={movie?.homepage}\r\n                title={movie?.title}\r\n                closeModal={() => setOpenLink(false)}\r\n                />\r\n            </Modal>\r\n        </Container>\r\n    )\r\n}\r\n\r\n\r\nexport default Detail; "]},"metadata":{},"sourceType":"module"}